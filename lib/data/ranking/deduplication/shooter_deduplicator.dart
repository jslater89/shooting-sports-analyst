import 'package:shooting_sports_analyst/data/ranking/rater_types.dart';
import 'package:shooting_sports_analyst/data/ranking/rating_error.dart';
import 'package:shooting_sports_analyst/data/sport/shooter/shooter.dart';

/// ShooterDeduplicators implement shooter deduplication: the process
/// whereby shooters in sports that can have multiple member numbers
/// per unique person (like USPSA's A/TY/FY, L, B, RD setup) are turned
/// from multiple ratings into a single rating.
abstract class ShooterDeduplicator {
  const ShooterDeduplicator();

  /// deduplicateShooters runs the deduplication logic on the inputs,
  /// editing them in place (!). USPSADeduplicator is the canonical
  /// implementation.
  ///
  /// [knownShooters] is a map of processed member numbers to ratings.
  /// Duplicated shooters must be removed from knownShooters after they
  /// are mapped.
  ///
  /// [shooterAliases] is a map of shooter names that identify the
  /// same person (i.e., maxmicheljr and maxmichel). It is necessary
  /// only when a shooter's registration name and member number
  /// change at the same time.
  ///
  /// [currentMappings] is the current list of active member number
  /// mappings generated by the rating system. Newly-created mappings
  /// as a result of this method will be added to it.
  ///
  /// [userMappings] is the list of user-specified member number mappings
  /// in rater settings, and will not be modified. Mappings identified in
  /// [userMappings] and created by this method must also be entered in
  /// [currentMappings].
  ///
  /// [mappingBlacklist] is the list of user-specified member number mapping
  /// blacklists. Numbers appearing as keys in [mappingBlacklist] must not be
  /// mapped to the corresponding values.
  RatingResult deduplicateShooters({
    required Map<String, ShooterRating> knownShooters,
    required Map<String, String> shooterAliases,
    required Map<String, String> currentMappings,
    required Map<String, String> userMappings,
    required Map<String, String> mappingBlacklist,
    bool checkDataEntryErrors = true,
    bool verbose = false,
  });

  static String processName(Shooter shooter) {
    String name = "${shooter.firstName.toLowerCase().replaceAll(RegExp(r"\s+"), "")}"
        + "${shooter.lastName.toLowerCase().replaceAll(RegExp(r"\s+"), "")}";
    name = name.replaceAll(RegExp(r"[^a-zA-Z0-9]"), "");

    return name;
  }
}